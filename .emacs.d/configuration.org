* Appearance
** Hide the menu bar on top
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

** Set theme directory and use monokai

#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t)
#+END_SRC

** Use pretty icon for org-ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " â†·")
#+END_SRC

** Add a whitespace in linum-mode
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%d ")
#+END_SRC

** Highlight matching parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+END_SRC

* Packages
** Initialize packages
#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (setq package-archives
     '(("melpa" . "https://melpa.org/packages/")
       ("gnu" . "https://elpa.gnu.org/packages/")))
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
#+END_SRC

* evil mode
** Use evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
  (require 'evil)
  (evil-mode 1)
#+END_SRC

** Keybinds
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "RET") 'org-return)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-next)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "SPC") 'scroll-up-command)
  (define-key evil-normal-state-map (kbd "0") 'back-to-indentation)
#+END_SRC

** Evil-Leader
#+BEGIN_SRC emacs-lisp
  (require 'evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader ";")
  (evil-leader/set-key
    "a" 'org-agenda
    "b" 'switch-to-buffer
    "c" 'org-capture
    "k" 'kill-buffer
    "l" 'org-insert-link
    "p" 'projectile-command-map
    "t" 'org-set-tags-command
    "0" 'delete-window
    "'" 'split-window-horizontally
    "\"" 'split-window-vertically
    "#" 'linum-mode)
#+END_SRC

** Evil Collection
#+BEGIN_SRC emacs-lisp
  (evil-collection-init '(calendar dired))
#+END_SRC

* org-mode
** List of files to parse for org-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Documents/org/index.org"
                               "~/Documents/org/agenda.org"
                               "~/Documents/Work/index.org"
                               "~/Documents/Work/capture.org"
                               "~/Documents/org/Capture/capture.org"))
#+END_SRC

** Org-Capture
*** Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("b" "Blog" entry (file+headline "~/Documents/org/Blog/ideas.org" "Blog Topics")
                                 "* %?")
                                ("t" "To Do" entry (file+headline "~/Documents/org/Capture/capture.org" "Tasks")
                                 "* TODO %?\n  %T")
                                ("i" "Infrastructure To Do" entry (file+headline "~/Documents/org/Projects/Infrastructure/capture.org" "Tasks")
                                 "* TODO %?\n  %T")
                                ("r" "Rambling while working" entry (file+headline "~/Documents/org/Capture/transcribe.org" "Transcribe")
                                 "* Transcribe %T %?\n")
                                ("p" "Project Ideas" entry (file+headline "~/Documents/org/Capture/projects.org" "Projects")
                                 "* Idea: %?\n")
                                ("l" "Links" entry (file+headline "~/Documents/org/Capture/links.org" "Read me later")
                                 "* %?")
                                ("a" "Archive" entry (file+headline "~/Documents/org/Capture/archive.org" "Archive me")
                                 "* %?")
                                ("w" "Work" entry (file+headline "~/Documents/Work/capture.org" "Work ToDos")
                                 "* TODO %?\n  %T")))
#+END_SRC

** Follow links with return
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC

** Keybinds
*** Cycle task states with 't'
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "t" 'org-todo)
#+END_SRC

*** Use TAB to expand/collapse sections
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)
#+END_SRC

** Highlight code in source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Don't add footer in exported HTML files
#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

** Section appearance
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
#+END_SRC

** Keep org files folded when opening them
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded t)
#+END_SRC

** Task keywords
I find that I lately have ended up with a lot of tasks that I want to keep a
history of instead of just deleting them once there's no need for them anymore,
but I'm lacking a keyword for "not applicable anymore".
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE" "NA" "FAILED")))
#+END_SRC

* org-journal
** Set journal directory
#+BEGIN_SRC emacs-lisp
  (setq org-journal-dir "~/Documents/journal")
#+END_SRC
** Set date format to DDMMYY
#+BEGIN_SRC emacs-lisp
  (setq org-journal-date-format "%A, %d/%m/%Y")
#+END_SRC

** Load org-journal
#+BEGIN_SRC emacs-lisp
  (require 'org-journal)
#+END_SRC

* projectile
** Enable projectile
#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
#+END_SRC

** Set code and docs directories
#+BEGIN_SRC emacs-lisp
  (setq projectile-project-search-path '("~/Code/Erethon/" "~/Documents/org/"))
#+END_SRC

* Settings
** General settings
*** Set tab to two spaces
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
#+END_SRC

*** Remove trailing whitespace on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Open a debug console on errors
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
#+END_SRC

*** Backup file location
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,"~/tmp/emacs")))
  (setq auto-save-file-name-transforms
        `((".*" ,"~/tmp/emacs" t)))
#+END_SRC

*** Recent files
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\C-r" 'recentf-open-files)
#+END_SRC

*** Prompt for y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** [[https://www.emacswiki.org/emacs/SmoothScrolling][Scroll one line at a time when at the end of the screen]]
#+BEGIN_SRC emacs-lisp
  (setq scroll-step            1
        scroll-conservatively  10000)
#+END_SRC

*** Enable babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((shell . t)
      (python . t)
      (dot . t)
     )
  )
#+END_SRC

*** Set ssh as the default mode for Tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

*** Hide most stuff from the init screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
  (setq initial-buffer-choice "~/Documents/org")
#+END_SRC

*** Auto-close parentheses/double quotes/brackets/etc
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

*** Wrap lines automatically at 80 chars
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

** Language specific
*** Python
**** Tab width
#+BEGIN_SRC emacs-lisp
  (setq python-indent 4)
#+END_SRC
